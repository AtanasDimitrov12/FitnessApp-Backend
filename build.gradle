plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2' // Fixed version
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.sonarqube' version '5.1.0.4882'
	id 'jacoco'
}

group = 'fitness-app-be'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.release.set(21)  // Ensures compatibility with Java 21
	options.encoding = 'UTF-8'  // Fixes encoding issues
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.10"
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// API Handling and JSON Parsing
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// MySQL and ORM
	implementation 'mysql:mysql-connector-java:8.0.33'

	// Lombok
	implementation 'org.projectlombok:lombok:1.18.30' // Updated Lombok
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
	testImplementation 'org.springframework.security:spring-security-test'

	// Cloudinary
	implementation 'com.cloudinary:cloudinary-http44:1.27.0'

	// WebSockets
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.security:spring-security-messaging:6.1.2'
}

task populateMeals(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'com.fitness_app_be.fitness_app.configuration.dbInitializer'
	args = ['populateMeals']
}

sonar {
	properties {
		property "sonar.projectKey", "FitnessApp"
		property "sonar.projectName", "FitnessApp"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", System.getenv("SONARQUBE_TOKEN")  // Removed hardcoded token
		property "sonar.qualitygate.wait", true
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('sonarqube') {
	dependsOn('test', 'jacocoTestReport')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}
